---
groups:
  - name: all
    jobs:
      - init-bucket
      - vpc
      - generate-secrets
      - bosh-terraform
      - generate-bosh-config
      - bosh-deploy
      - concourse-terraform
      - generate-concourse-config
      - concourse-deploy
      - post-deploy
      - expunge-concourse

  - name: credentials
    jobs:
      - clear-concourse-credentials
      - clear-bosh-credentials
      - rotate-bosh-internal-certs
      - delete-old-bosh-internal-certs

resource_types:
- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource
    tag: fda60bf4c5f85e96c16f704e128e5ead9e84d30d

- name: semver-iam
  type: docker-image
  source:
    repository: governmentpaas/semver-resource
    tag: ecbdd201e122b44de99a40ac9f24407c1a43b9a2

resources:
  - name: paas-bootstrap
    type: git
    source:
      uri: https://github.com/alphagov/paas-bootstrap.git
      branch: ((branch_name))
      commit_verification_key_ids: ((gpg_ids))

  - name: bucket-terraform-state
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bucket.tfstate

  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: pipeline-trigger

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: vpc.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: bosh-CA
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-CA.tar.gz
      initial_version: "-"
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: bosh-CA-crt
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-CA.crt
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-certs
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-certs.tar.gz
      initial_version: "-"
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-secrets.yml
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: bosh_id_rsa
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: bosh_id_rsa.pub
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: ""

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: id_rsa
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: ""

  - name: ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: id_rsa.pub
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh.tfstate
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: bosh-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-manifest.yml

  - name: runtime-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: runtime-config.yml

  - name: bosh-init-state
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: ((bosh_manifest_state))
      initial_version: "-"
      # ID has to match value from the seed in the bosh-cli-v2 container:
      # https://github.com/alphagov/paas-docker-cloudfoundry-tools/blob/master/bosh-cli-v2/bosh_init_cache/minimal-state.json
      initial_content_text: |
        { "installation_id": "44f01911-a47a-4a24-6ca3-a3109b33f058" }

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: concourse.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: git-ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa.pub
      region_name: ((aws_region))
      initial_version: "-"

  - name: git-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa
      region_name: ((aws_region))
      initial_version: "-"

  - name: concourse-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: concourse-secrets.yml
      initial_version: "-"
      initial_content_text: ""

  - name: concourse-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: concourse-manifest.yml

  - name: concourse-ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: concourse_id_rsa.pub
      initial_version: "-"

  - name: concourse-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: concourse_id_rsa
      initial_version: "-"

jobs:
  - name: init-bucket
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap

      - task: try-fetch-bucket-state
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          inputs:
            - name: paas-bootstrap
          outputs:
            - name: bucket-state
          run:
            path: sh
            args:
            - -c
            - -e
            - |
              cd bucket-state
              aws s3 cp "s3://((state_bucket))/bucket.tfstate" . || true
              ls -l

      - task: create-init-bucket
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_state_bucket: ((state_bucket))
            AWS_DEFAULT_REGION: ((aws_region))
          inputs:
            - name: paas-bootstrap
            - name: bucket-state
          outputs:
            - name: updated-bucket-state
          run:
            path: sh
            args:
            - -c
            - -e
            - |
              [ -f bucket-state/bucket.tfstate ] && cp bucket-state/bucket.tfstate updated-bucket-state/bucket.tfstate
              terraform init paas-bootstrap/terraform/bucket
              terraform apply \
                -auto-approve=true \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -state=updated-bucket-state/bucket.tfstate \
                paas-bootstrap/terraform/bucket
        on_success:
          put: bucket-terraform-state
          params:
            file: updated-bucket-state/bucket.tfstate

      - task: self-update-pipelines
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            AWS_ACCOUNT: ((aws_account))
            SKIP_COMMIT_VERIFICATION: ((skip_commit_verification))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            TARGET_CONCOURSE: ((target_concourse))
            CONCOURSE_TYPE: ((concourse_type))
          run:
            path: ./paas-bootstrap/concourse/scripts/self-update-pipeline.sh

      - put: pipeline-trigger
        params: {bump: patch}

  - name: vpc
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          trigger: true
          passed: ['init-bucket']
        - get: pipeline-trigger
          trigger: true
          passed: ['init-bucket']
        - get: vpc-tfstate
        - get: git-ssh-public-key
        - get: git-ssh-private-key

      - task: generate-git-ssh-keys
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          inputs:
          - name: paas-bootstrap
          - name: git-ssh-public-key
          - name: git-ssh-private-key
          outputs:
          - name: generated-git-ssh-keys
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -s git-ssh-public-key/git_id_rsa.pub ] && [ -s git-ssh-private-key/git_id_rsa ]; then
                echo "Git SSH keys already exist, skipping."
                cp git-ssh-public-key/git_id_rsa.pub generated-git-ssh-keys
                cp git-ssh-private-key/git_id_rsa generated-git-ssh-keys
                exit 0
              fi
              apk add --update openssh
              cd generated-git-ssh-keys
              ssh-keygen -t rsa -b 4096 -f git_id_rsa -N ''
        on_success:
          aggregate:
            - put: git-ssh-public-key
              params:
                file: generated-git-ssh-keys/git_id_rsa.pub
            - put: git-ssh-private-key
              params:
                file: generated-git-ssh-keys/git_id_rsa

      - task: deploy-vpc
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          outputs:
          - name: updated-vpc-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              CONCOURSE_EGRESS_IP=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4)
              cp vpc-tfstate/vpc.tfstate updated-vpc-tfstate/vpc.tfstate
              terraform init paas-bootstrap/terraform/vpc
              terraform apply \
                -auto-approve=true \
                -var concourse_egress_cidr="${CONCOURSE_EGRESS_IP}/32" \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -state=updated-vpc-tfstate/vpc.tfstate \
                paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: updated-vpc-tfstate/vpc.tfstate

  - name: generate-secrets
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['init-bucket']
        - get: pipeline-trigger
          passed: ['init-bucket']
          trigger: true
        - get: bosh-CA
        - get: bosh-CA-crt
        - get: bosh-certs
        - get: bosh-secrets
        - get: bosh-ssh-private-key
        - get: bosh-ssh-public-key
        - get: ssh-private-key
        - get: ssh-public-key
        - get: concourse-secrets

      - task: generate-bosh-CA
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/certstrap
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: bosh-CA
              path: existing-bosh-CA
          outputs:
            - name: generated-bosh-CA
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if  [ -z "$(tar -tvzf existing-bosh-CA/bosh-CA.tar.gz)" ] ; then
                  certstrap init --years "10" --passphrase "" --common-name bosh-CA
                  ( cd out && tar -cvzf ../generated-bosh-CA/bosh-CA.tar.gz bosh-CA.* )
                else
                  echo "The CA cert already exists, skipping generation..."
                  cp existing-bosh-CA/bosh-CA.tar.gz generated-bosh-CA/bosh-CA.tar.gz
                  mkdir out
                  tar -xvzf generated-bosh-CA/bosh-CA.tar.gz -C out
                fi
                cp out/bosh-CA.crt generated-bosh-CA/bosh-CA.crt
        on_success:
          aggregate:
            - put: bosh-CA
              params:
                file: generated-bosh-CA/bosh-CA.tar.gz
            - put: bosh-CA-crt
              params:
                file: generated-bosh-CA/bosh-CA.crt

      - aggregate:
        - task: generate-bosh-certs
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/certstrap
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: bosh-CA
              - name: paas-bootstrap
              - name: bosh-certs
            outputs:
              - name: generated-bosh-certs
            params:
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  mkdir certs
                  echo "Extracting extant certs"
                  tar -xvzf bosh-certs/bosh-certs.tar.gz -C certs

                  ./paas-bootstrap/manifests/bosh-manifest/scripts/generate-bosh-certs.sh \
                    certs bosh-CA/bosh-CA.tar.gz create

                  echo "Creating updated cert tarball"
                  cd certs
                  tar -cvzf ../generated-bosh-certs/bosh-certs.tar.gz .
          on_success:
            put: bosh-certs
            params:
              file: generated-bosh-certs/bosh-certs.tar.gz

        - task: generate-bosh-secrets
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: ruby
                tag: 2.2-slim
            inputs:
              - name: paas-bootstrap
              - name: bosh-secrets
                path: existing-bosh-secrets
            outputs:
              - name: generated-bosh-secrets
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  BUNDLE_GEMFILE=paas-bootstrap/Gemfile bundle install --without=default --with=secret_generator
                  ./paas-bootstrap/manifests/bosh-manifest/scripts/generate-bosh-secrets.rb \
                    --existing-secrets existing-bosh-secrets/bosh-secrets.yml \
                    > generated-bosh-secrets/bosh-secrets.yml
                  ls -l generated-bosh-secrets
          on_success:
            put: bosh-secrets
            params:
              file: generated-bosh-secrets/bosh-secrets.yml

        - task: generate-bosh-ssh-keypair
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/git-ssh
                tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
            inputs:
              - name: paas-bootstrap
              - name: bosh-ssh-private-key
              - name: bosh-ssh-public-key
            outputs:
              - name: bosh-ssh-private-key-to-upload
              - name: bosh-ssh-public-key-to-upload
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if [ -s bosh-ssh-private-key/bosh_id_rsa ] && [ -s bosh-ssh-public-key/bosh_id_rsa.pub ]; then
                    echo "BOSH keys non-zero size, skipping generation..."
                    cp bosh-ssh-private-key/bosh_id_rsa bosh-ssh-private-key-to-upload
                    cp bosh-ssh-public-key/bosh_id_rsa.pub bosh-ssh-public-key-to-upload
                    exit 0
                  fi

                  echo "Generating new ssh key pair for BOSH..."
                  ssh-keygen -t rsa -b 4096 -f bosh_id_rsa -N ''
                  cp bosh_id_rsa bosh-ssh-private-key-to-upload
                  cp bosh_id_rsa.pub bosh-ssh-public-key-to-upload
          on_success:
            try:
              aggregate:
                - put: bosh-ssh-private-key
                  params:
                    file: bosh-ssh-private-key-to-upload/bosh_id_rsa
                - put: bosh-ssh-public-key
                  params:
                    file: bosh-ssh-public-key-to-upload/bosh_id_rsa.pub

        - task: generate-deployments-ssh-keypair
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/git-ssh
                tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
            inputs:
              - name: paas-bootstrap
              - name: ssh-private-key
              - name: ssh-public-key
            outputs:
              - name: ssh-private-key-to-upload
              - name: ssh-public-key-to-upload
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if [ -s ssh-private-key/id_rsa ] && [ -s ssh-public-key/id_rsa.pub ]; then
                    echo "Deployment keys non-zero size, skipping generation..."
                    cp ssh-private-key/id_rsa ssh-private-key-to-upload
                    cp ssh-public-key/id_rsa.pub ssh-public-key-to-upload
                    exit 0
                  fi

                  echo "Generating new ssh key pair for deployments..."
                  ssh-keygen -t rsa -b 4096 -f id_rsa -N ''
                  cp id_rsa ssh-private-key-to-upload
                  cp id_rsa.pub ssh-public-key-to-upload
          on_success:
            try:
              aggregate:
                - put: ssh-private-key
                  params:
                    file: ssh-private-key-to-upload/id_rsa
                - put: ssh-public-key
                  params:
                    file: ssh-public-key-to-upload/id_rsa.pub

      - task: generate-concourse-secrets
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: concourse-secrets
          outputs:
            - name: generated-concourse-secrets
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              BUNDLE_GEMFILE=paas-bootstrap/Gemfile bundle install --without=default --with=secret_generator
              ./paas-bootstrap/manifests/concourse-manifest/scripts/generate-concourse-secrets.rb \
                --existing-secrets concourse-secrets/concourse-secrets.yml \
                > generated-concourse-secrets/concourse-secrets.yml
              ls -l generated-concourse-secrets/concourse-secrets.yml
        on_success:
          put: concourse-secrets
          params:
            file: generated-concourse-secrets/concourse-secrets.yml

  - name: bosh-terraform
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          trigger: true
          passed: ['generate-secrets', 'vpc']
        - get: paas-bootstrap
          passed: ['generate-secrets']
        - get: bosh-secrets
          passed: ['generate-secrets']
        - get: vpc-tfstate
          passed: ['vpc']
        - get: bosh-tfstate
        - get: bosh-ssh-public-key
          passed: ['generate-secrets']
        - get: ssh-public-key
          passed: ['generate-secrets']

      - task: extract-terraform-variables
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-secrets
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_yaml.rb \
                < bosh-secrets/bosh-secrets.yml > terraform-variables/bosh-secrets.tfvars.sh

      - task: terraform-apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
            - name: paas-bootstrap
            - name: terraform-variables
            - name: bosh-tfstate
            - name: bosh-ssh-public-key
            - name: ssh-public-key
          outputs:
            - name: updated-bosh-tfstate
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            TF_VAR_bosh_az: ((bosh_az))
            TF_VAR_bosh_fqdn: ((bosh_fqdn))
            TF_VAR_bosh_fqdn_external: ((bosh_fqdn_external))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/bosh-secrets.tfvars.sh

                cp ssh-public-key/id_rsa.pub paas-bootstrap/terraform/bosh
                cp bosh-ssh-public-key/bosh_id_rsa.pub paas-bootstrap/terraform/bosh
                CONCOURSE_EGRESS_IP=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4)

                cp bosh-tfstate/bosh.tfstate updated-bosh-tfstate/bosh.tfstate
                terraform init paas-bootstrap/terraform/bosh
                terraform apply \
                  -auto-approve=true \
                  -var concourse_egress_cidr="${CONCOURSE_EGRESS_IP}/32" \
                  -var env="((deploy_env))" \
                  -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                  -state=updated-bosh-tfstate/bosh.tfstate \
                  paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

  - name: generate-bosh-config
    serial_groups: [bosh-deploy]
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          trigger: true
          passed: ['bosh-terraform']
        - get: paas-bootstrap
          passed: ['bosh-terraform']
        - get: bosh-secrets
          passed: ['bosh-terraform']
        - get: bosh-CA
        - get: bosh-certs
        - get: vpc-tfstate
          passed: ['bosh-terraform']
        - get: bosh-tfstate
          passed: ['bosh-terraform']

      - task: extract_terraform_outputs
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-tfstate
          outputs:
            - name: terraform-outputs
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < vpc-tfstate/vpc.tfstate \
                  > terraform-outputs/vpc.terraform-outputs.yml
                ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < bosh-tfstate/bosh.tfstate \
                  > terraform-outputs/bosh.terraform-outputs.yml

      - task: extract-bosh-CA-and-certs
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/certstrap
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: bosh-CA
            - name: bosh-certs
          outputs:
            - name: certs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                tar -xvzf bosh-CA/bosh-CA.tar.gz -C certs
                tar -xvzf bosh-certs/bosh-certs.tar.gz -C certs

                (
                cd certs
                for file in *.crt; do
                  cn=${file%.crt}
                  yaml_key_name=$(echo "${cn}" | tr A-Z-. a-z__)

                  echo "Converting ${cn} certs to YAML"
                  ../paas-bootstrap/concourse/scripts/file_to_yaml.sh secrets "${yaml_key_name}_key" "${cn}.key" > "${cn}_key.yml"
                  ../paas-bootstrap/concourse/scripts/file_to_yaml.sh secrets "${yaml_key_name}_cert" "${cn}.crt" > "${cn}_cert.yml"
                done
                )

      - task: render-bosh-manifest
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/spruce
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: terraform-outputs
            - name: bosh-secrets
            - name: certs
          outputs:
            - name: bosh-manifest
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            DATADOG_API_KEY: ((datadog_api_key))
            DATADOG_APP_KEY: ((datadog_app_key))
            ENABLE_DATADOG: ((enable_datadog))
            ENABLE_COLLECTD_ADDON: ((enable_collectd_addon))
            BOSH_MANIFEST_STUBS: |
              ./paas-bootstrap/manifests/bosh-manifest/bosh-manifest.yml
              ./bosh-secrets/bosh-secrets.yml
              ./certs/*.yml
              ./terraform-outputs/bosh.terraform-outputs.yml
              ./terraform-outputs/vpc.terraform-outputs.yml
            BOSH_FQDN: ((bosh_fqdn))
            BOSH_FQDN_EXTERNAL: ((bosh_fqdn_external))
            BOSH_INSTANCE_PROFILE: ((bosh_instance_profile))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if [ "${ENABLE_DATADOG}" = "true" ] ; then
                   BOSH_MANIFEST_STUBS="${BOSH_MANIFEST_STUBS}
                                        ./paas-bootstrap/manifests/bosh-manifest/addons/datadog-agent.yml
                                        ./paas-bootstrap/manifests/runtime-config/addons-meta/datadog-agent.yml"
                fi

                if [ "${ENABLE_COLLECTD_ADDON}" = "true" ]; then
                   BOSH_MANIFEST_STUBS="${BOSH_MANIFEST_STUBS}
                                        ./paas-bootstrap/manifests/bosh-manifest/addons/collectd.yml
                                        ./paas-bootstrap/manifests/runtime-config/addons-meta/collectd.yml"
                fi

                # shellcheck disable=SC2086
                ./paas-bootstrap/manifests/shared/build_manifest.sh $BOSH_MANIFEST_STUBS > bosh-manifest/bosh-manifest.yml
        on_success:
          put: bosh-manifest
          params:
            file: bosh-manifest/bosh-manifest.yml

      - task: render-runtime-config
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/spruce
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: terraform-outputs
          outputs:
            - name: runtime-config
          params:
            AWS_ACCOUNT: ((aws_account))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            MANIFEST_STUBS: |
              ./paas-bootstrap/manifests/runtime-config/runtime-config-base.yml
              ./terraform-outputs/*.yml
            ENABLE_DATADOG: ((enable_datadog))
            DATADOG_API_KEY: ((datadog_api_key))
            ENABLE_COLLECTD_ADDON: ((enable_collectd_addon))
            ENABLE_SYSLOG_ADDON: ((enable_syslog_addon))
            LOGIT_SYSLOG_ADDRESS: ((logit_syslog_address))
            LOGIT_SYSLOG_PORT: ((logit_syslog_port))
            LOGIT_CA_CERT: "((logit_ca_cert))"
            LOGIT_CLIENT_KEY: "((logit_client_key))"
            LOGIT_CLIENT_CERT: "((logit_client_cert))"
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                echo "Generating runtime config..."

                if [ "${ENABLE_DATADOG}" = "true" ] ; then
                   MANIFEST_STUBS="${MANIFEST_STUBS}
                                  ./paas-bootstrap/manifests/runtime-config/addons/datadog-agent.yml
                                  ./paas-bootstrap/manifests/runtime-config/addons-meta/datadog-agent.yml"
                fi

                if [ "${ENABLE_COLLECTD_ADDON}" = "true" ]; then
                   MANIFEST_STUBS="${MANIFEST_STUBS}
                                  ./paas-bootstrap/manifests/runtime-config/addons/collectd.yml
                                  ./paas-bootstrap/manifests/runtime-config/addons-meta/collectd.yml"
                fi

                if [ "${ENABLE_SYSLOG_ADDON}" = "true" ]; then
                   MANIFEST_STUBS="${MANIFEST_STUBS}
                                  ./paas-bootstrap/manifests/runtime-config/addons/syslog-forwarder.yml"
                fi

                # shellcheck disable=SC2086
                ./paas-bootstrap/manifests/shared/build_manifest.sh $MANIFEST_STUBS > runtime-config/runtime-config.yml
        on_success:
          put: runtime-config
          params:
            file: runtime-config/runtime-config.yml

  - name: bosh-deploy
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          passed: ['generate-bosh-config']
          trigger: true
        - get: paas-bootstrap
          passed: ['generate-bosh-config']
        - get: bosh-secrets
          passed: ['generate-bosh-config']
        - get: bosh-manifest
          passed: ['generate-bosh-config']
        - get: runtime-config
          passed: ['generate-bosh-config']
        - get: bosh-init-state
        - get: bosh-ssh-private-key
        - get: bosh-CA-crt
          passed: ['generate-secrets']

      - task: bosh-create-env
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
            - name: bosh-manifest
            - name: bosh-init-state
            - name: bosh-ssh-private-key
          outputs:
            - name: bosh-init-working-dir
          params:
            BOSH_MANIFEST_STATE: ((bosh_manifest_state))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                mkdir -p bosh-init-working-dir/.ssh
                cp bosh-ssh-private-key/bosh_id_rsa bosh-init-working-dir/.ssh/bosh_id_rsa
                chmod 400 bosh-init-working-dir/.ssh/bosh_id_rsa
                cp bosh-manifest/bosh-manifest.yml bosh-init-working-dir/bosh-manifest.yml
                cp bosh-init-state/"${BOSH_MANIFEST_STATE}" bosh-init-working-dir/bosh-manifest-state.json
                bosh -n create-env bosh-init-working-dir/bosh-manifest.yml \
                  --state=bosh-init-working-dir/bosh-manifest-state.json
        ensure:
          put: bosh-init-state
          params:
            file: "bosh-init-working-dir/bosh-manifest-state.json"

      - task: update-runtime-config
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
            - name: paas-bootstrap
            - name: bosh-secrets
            - name: runtime-config
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn_external))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-bootstrap/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                bosh -n update-runtime-config runtime-config/runtime-config.yml
                ./paas-bootstrap/concourse/scripts/bosh_upload_releases_from_manifest.rb runtime-config/runtime-config.yml

  - name: concourse-terraform
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['bosh-terraform']
        - get: pipeline-trigger
          trigger: true
          passed: ['bosh-terraform']
        - get: vpc-tfstate
          passed: ['bosh-terraform']
        - get: bosh-tfstate
          passed: ['bosh-terraform']
        - get: concourse-tfstate
        - get: git-ssh-public-key
        - get: concourse-ssh-public-key
        - get: concourse-ssh-private-key

      - task: terraform-outputs-to-sh
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate \
              > bosh-terraform-outputs/tfvars.sh
              ls -l bosh-terraform-outputs/tfvars.sh

      - task: generate-acm-certs
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          inputs:
            - name: paas-bootstrap
          params:
            ACM_DOMAINS: ((acm_domains))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              for acm_domain in ${ACM_DOMAINS}; do
                export ACM_DOMAIN_ZONE_ID="${acm_domain%%:*}"
                export ACM_DOMAIN_FQDN="${acm_domain##*:}"
                ./paas-bootstrap/concourse/scripts/create_acm_cert.sh
              done

      - task: generate-concourse-ssh-keys
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          inputs:
          - name: paas-bootstrap
          - name: concourse-ssh-public-key
          - name: concourse-ssh-private-key
          outputs:
          - name: generated-concourse-ssh-keys
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -s concourse-ssh-public-key/concourse_id_rsa.pub ] && [ -s concourse-ssh-private-key/concourse_id_rsa ]; then
                echo "Concourse SSH keys already exist, skipping."
                cp concourse-ssh-public-key/concourse_id_rsa.pub generated-concourse-ssh-keys
                cp concourse-ssh-private-key/concourse_id_rsa generated-concourse-ssh-keys
                exit 0
              fi

              apk add --update openssh
              cd generated-concourse-ssh-keys
              ssh-keygen -t rsa -b 4096 -f concourse_id_rsa -N ''
        on_success:
          aggregate:
            - put: concourse-ssh-public-key
              params:
                file: generated-concourse-ssh-keys/concourse_id_rsa.pub
            - put: concourse-ssh-private-key
              params:
                file: generated-concourse-ssh-keys/concourse_id_rsa

      - task: terraform-apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          - name: concourse-tfstate
          - name: git-ssh-public-key
          - name: generated-concourse-ssh-keys
          outputs:
          - name: updated-concourse-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_concourse_hostname: ((concourse_hostname))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cp generated-concourse-ssh-keys/concourse_id_rsa.pub paas-bootstrap/terraform/concourse
              . vpc-terraform-outputs/tfvars.sh
              . bosh-terraform-outputs/tfvars.sh
              export TF_VAR_git_rsa_id_pub
              TF_VAR_git_rsa_id_pub=$(cat git-ssh-public-key/git_id_rsa.pub)
              CONCOURSE_EGRESS_IP=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4)

              cp concourse-tfstate/concourse.tfstate updated-concourse-tfstate/concourse.tfstate
              terraform init paas-bootstrap/terraform/concourse
              terraform apply \
                -auto-approve=true \
                -var concourse_egress_cidr="${CONCOURSE_EGRESS_IP}/32" \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -state=updated-concourse-tfstate/concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: updated-concourse-tfstate/concourse.tfstate

      # FIXME: Remove after the all Concourse instances were updated
      - task: delete-concourse-acm-cert
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          inputs:
            - name: paas-bootstrap
          params:
            ACM_DOMAIN_ZONE_ID: ((system_dns_zone_id))
            ACM_DOMAIN_FQDN: ((concourse_hostname)).((system_dns_zone_name))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: ./paas-bootstrap/concourse/scripts/delete_acm_cert.sh

      # Temporary task to add the git-${DEPLOY_ENV} user to git group
      - task: add-git-user-to-group
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          inputs:
          - name: paas-bootstrap
          params:
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              aws iam add-user-to-group --user-name "git-${DEPLOY_ENV}" --group-name concourse-pool-git-rw

  - name: generate-concourse-config
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['concourse-terraform']
        - get: pipeline-trigger
          trigger: true
          passed: ['concourse-terraform']
        - get: vpc-tfstate
          passed: ['concourse-terraform']
        - get: concourse-tfstate
          passed: ['concourse-terraform']
        - get: concourse-secrets
        - get: bosh-tfstate
          passed: ['concourse-terraform']

      - task: terraform-outputs-to-yaml
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: concourse-tfstate
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < vpc-tfstate/vpc.tfstate \
              > terraform-outputs/vpc-terraform-outputs.yml
              ls -l terraform-outputs/vpc-terraform-outputs.yml

              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < concourse-tfstate/concourse.tfstate \
              > terraform-outputs/concourse-terraform-outputs.yml
              ls -l terraform-outputs/concourse-terraform-outputs.yml

              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < bosh-tfstate/bosh.tfstate \
              > terraform-outputs/bosh-terraform-outputs.yml
              ls -l terraform-outputs/bosh-terraform-outputs.yml

      - task: generate-concourse-manifest
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/spruce
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          params:
            AWS_ACCOUNT: ((aws_account))
            DATADOG_API_KEY: ((datadog_api_key))
            DATADOG_APP_KEY: ((datadog_app_key))
            ENABLE_DATADOG: ((enable_datadog))
            CONCOURSE_AUTH_DURATION: ((concourse_auth_duration))
            CONCOURSE_MANIFEST_STUBS: |
              ./paas-bootstrap/manifests/concourse-manifest/concourse-base.yml
              concourse-secrets/concourse-secrets.yml
              terraform-outputs/concourse-terraform-outputs.yml
              terraform-outputs/vpc-terraform-outputs.yml
              terraform-outputs/bosh-terraform-outputs.yml
            CONCOURSE_INSTANCE_TYPE: ((concourse_instance_type))
            CONCOURSE_INSTANCE_PROFILE: ((concourse_instance_profile))
            ENABLE_GITHUB: ((enable_github))
            GITHUB_CLIENT_ID: ((github_client_id))
            GITHUB_CLIENT_SECRET: ((github_client_secret))
          inputs:
          - name: paas-bootstrap
          - name: concourse-secrets
          - name: terraform-outputs
          outputs:
          - name: concourse-manifest
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ "${ENABLE_DATADOG}" = "true" ] ; then
                 CONCOURSE_MANIFEST_STUBS="${CONCOURSE_MANIFEST_STUBS}
                                ./paas-bootstrap/manifests/concourse-manifest/addons/datadog-concourse-integration.yml"
              fi
              if [ "${ENABLE_GITHUB}" = "true" ] ; then
                CONCOURSE_MANIFEST_STUBS="${CONCOURSE_MANIFEST_STUBS}
                                ./paas-bootstrap/manifests/concourse-manifest/github_auth/config.yml"
                if [ "${AWS_ACCOUNT}" = "dev" ] || [ "${AWS_ACCOUNT}" = "ci" ]; then
                  CONCOURSE_MANIFEST_STUBS="${CONCOURSE_MANIFEST_STUBS}
                                ./paas-bootstrap/manifests/concourse-manifest/github_auth/dev_ci_additional_users.yml"
                fi
              fi

              # shellcheck disable=SC2086
              ./paas-bootstrap/manifests/shared/build_manifest.sh $CONCOURSE_MANIFEST_STUBS \
                > concourse-manifest/concourse-manifest.yml
              ls -l concourse-manifest/concourse-manifest.yml
        on_success:
          put: concourse-manifest
          params:
            file: concourse-manifest/concourse-manifest.yml

  - name: concourse-deploy
    serial: true
    interruptible: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['generate-concourse-config']
        - get: pipeline-trigger
          trigger: true
          passed: ['generate-concourse-config', 'bosh-deploy']
        - get: bosh-secrets
        - get: concourse-manifest
          passed: ['generate-concourse-config']
        - get: concourse-secrets
        - get: bosh-CA-crt
          passed: ['generate-secrets']

      - task: get-and-upload-stemcell
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
            - name: bosh-secrets
            - name: paas-bootstrap
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn_external))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb

                STEMCELL_VERSION=$($VAL_FROM_YAML meta.stemcell.version paas-bootstrap/manifests/concourse-manifest/concourse-base.yml)
                STEMCELL_NAME=$($VAL_FROM_YAML meta.stemcell.name paas-bootstrap/manifests/concourse-manifest/concourse-base.yml)

                wget "https://bosh.io/d/stemcells/${STEMCELL_NAME}?v=${STEMCELL_VERSION}" -O stemcell.tgz
                ./paas-bootstrap/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                bosh -n upload-stemcell stemcell.tgz

      - task: deploy-concourse
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
          - name: concourse-manifest
          - name: bosh-secrets
          - name: paas-bootstrap
          - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn_external))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
              bosh -n deploy concourse-manifest/concourse-manifest.yml

      - task: add-env-specific-team
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: concourse-manifest
            - name: concourse-secrets
          params:
            CONCOURSE_HOSTNAME: ((concourse_hostname))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_ATC_USER: admin
            FLY_TEAM: ((aws_account))
            FLY_TARGET: ((deploy_env))
            FLY_CMD: ./paas-bootstrap/bin/fly
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                export CONCOURSE_URL="https://${CONCOURSE_HOSTNAME}.${SYSTEM_DNS_ZONE_NAME}"
                export CONCOURSE_ATC_PASSWORD
                CONCOURSE_ATC_PASSWORD=$(./paas-bootstrap/concourse/scripts/val_from_yaml.rb secrets.concourse_atc_password concourse-secrets/concourse-secrets.yml)

                ./paas-bootstrap/concourse/scripts/fly_sync_and_login.sh
                ${FLY_CMD} -t "${FLY_TARGET}" set-team -n "${FLY_TEAM}" \
                  --basic-auth-username admin --basic-auth-password "${CONCOURSE_ATC_PASSWORD}" --non-interactive

  - name: post-deploy
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          passed: ['concourse-deploy']
          trigger: true
        - get: paas-bootstrap
          passed: ['concourse-deploy']
        - get: bosh-secrets
          passed: ['concourse-deploy']
        - get: bosh-CA-crt
          passed: ['generate-secrets']

      - task: test-bosh-vms
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
          - name: paas-bootstrap
          - name: bosh-secrets
          - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn_external))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
              bosh deployment
              bosh vms | tee vms.txt
              [ "$(grep '|' vms.txt | grep -cEv "(^\|\ \ |\-\-|VM|running)")" -eq 0 ]

      - task: upload-pipeline
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            AWS_ACCOUNT: ((aws_account))
            SKIP_COMMIT_VERIFICATION: ((skip_commit_verification))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            CONCOURSE_TYPE: ((concourse_type))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              make -C ./paas-bootstrap "${AWS_ACCOUNT}" "${CONCOURSE_TYPE}" pipelines

  - name: expunge-concourse
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['post-deploy']
        - get: pipeline-trigger
          trigger: true
          passed: ['post-deploy']
        - get: vpc-tfstate
        - get: bosh-tfstate
        - get: concourse-tfstate

      - task: terraform-outputs-to-sh
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate \
              > bosh-terraform-outputs/tfvars.sh
              ls -l bosh-terraform-outputs/tfvars.sh

      - task: remove-concourse-IP-from-ssh-SG
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          outputs:
          - name: updated-vpc-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cp vpc-tfstate/vpc.tfstate updated-vpc-tfstate/vpc.tfstate
              terraform init paas-bootstrap/terraform/vpc
              terraform apply \
                -auto-approve=true \
                -target=aws_security_group.office-access-ssh \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -target=aws_subnet.infra \
                -state=updated-vpc-tfstate/vpc.tfstate \
                paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: updated-vpc-tfstate/vpc.tfstate

      - task: remove-concourse-IP-from-BOSH-SG
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-tfstate
          outputs:
          - name: updated-bosh-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            TF_VAR_bosh_fqdn: ((bosh_fqdn))
            TF_VAR_bosh_fqdn_external: ((bosh_fqdn_external))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              export TF_VAR_secrets_bosh_postgres_password=""
              export TF_VAR_bosh_az=""

              cp bosh-tfstate/bosh.tfstate updated-bosh-tfstate/bosh.tfstate
              terraform init paas-bootstrap/terraform/bosh
              terraform apply \
                -auto-approve=true \
                -target=aws_security_group.bosh \
                -state=updated-bosh-tfstate/bosh.tfstate \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

      - task: remove-concourse-IP-from-Concourse-SG
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          - name: concourse-tfstate
          outputs:
          - name: updated-concourse-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_concourse_hostname: ((concourse_hostname))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            TF_VAR_git_rsa_id_pub: ""
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              . bosh-terraform-outputs/tfvars.sh

              cp concourse-tfstate/concourse.tfstate updated-concourse-tfstate/concourse.tfstate
              terraform init paas-bootstrap/terraform/concourse
              terraform apply \
                -auto-approve=true \
                -target=aws_security_group.concourse \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -state=updated-concourse-tfstate/concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: updated-concourse-tfstate/concourse.tfstate

  - name: clear-concourse-credentials
    plan:
      - get: paas-bootstrap
      - get: concourse-secrets
      - task: clear-passwords
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/spruce
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: concourse-secrets
          outputs:
            - name: modified-secrets
          run:
            path: sh
            args:
              - -e
              - -c
              - |

                spruce merge \
                  concourse-secrets/concourse-secrets.yml \
                  paas-bootstrap/concourse/resources/concourse-secrets-keep.yml | \
                  spruce merge - paas-bootstrap/concourse/resources/finalize.yml \
                  > modified-secrets/concourse-secrets.yml
        on_success:
          put: concourse-secrets
          params:
            file: modified-secrets/concourse-secrets.yml
      - task: clear-ssh-keys
        file: paas-bootstrap/concourse/tasks/delete-ssh-keys.yml
        params:
          AWS_DEFAULT_REGION: ((aws_region))
          BUCKET: ((state_bucket))
          SSH_KEY_PREFIX: concourse_

  - name: clear-bosh-credentials
    plan:
      - get: bosh-secrets
      - get: paas-bootstrap
      - task: clear-passwords
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/spruce
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-bootstrap
            - name: bosh-secrets
          outputs:
            - name: modified-secrets
          run:
            path: sh
            args:
              - -e
              - -c
              - |

                spruce merge \
                  bosh-secrets/bosh-secrets.yml \
                  paas-bootstrap/concourse/resources/bosh-secrets-keep.yml | \
                  spruce merge - paas-bootstrap/concourse/resources/finalize.yml \
                  > modified-secrets/bosh-secrets.yml
        on_success:
          put: bosh-secrets
          params:
            file: modified-secrets/bosh-secrets.yml
      - task: clear-ssh-keys
        file: paas-bootstrap/concourse/tasks/delete-ssh-keys.yml
        params:
          AWS_DEFAULT_REGION: ((aws_region))
          BUCKET: ((state_bucket))
          SSH_KEY_PREFIX: bosh_

  - name: rotate-bosh-internal-certs
    serial: true
    plan:
    - aggregate:
      - get: paas-bootstrap
      - get: bosh-CA
      - get: bosh-certs
    - task: rotate-bosh-internal-certs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/certstrap
            tag: 465642da06051a55630d39c899697b678f66a7f7
        inputs:
          - name: bosh-CA
          - name: paas-bootstrap
          - name: bosh-certs
        outputs:
          - name: generated-bosh-certs
        params:
          SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              mkdir certs
              echo "Extracting certs"
              tar -xvzf bosh-certs/bosh-certs.tar.gz -C certs

              ./paas-bootstrap/manifests/bosh-manifest/scripts/generate-bosh-certs.sh \
                certs bosh-CA/bosh-CA.tar.gz rotate

              echo "Creating updated cert tarball"
              cd certs
              tar -cvzf ../generated-bosh-certs/bosh-certs.tar.gz .
      on_success:
        put: bosh-certs
        params:
          file: generated-bosh-certs/bosh-certs.tar.gz

  - name: delete-old-bosh-internal-certs
    serial: true
    plan:
    - aggregate:
      - get: paas-bootstrap
      - get: bosh-certs
    - task: delete-old-bosh-internal-certs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/certstrap
            tag: 465642da06051a55630d39c899697b678f66a7f7
        inputs:
          - name: paas-bootstrap
          - name: bosh-certs
        outputs:
          - name: generated-bosh-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              mkdir certs
              echo "Extracting certs"
              tar -xvzf bosh-certs/bosh-certs.tar.gz -C certs

              rm -vf certs/*_old.*

              echo "Creating updated cert tarball"
              cd certs
              tar -cvzf ../generated-bosh-certs/bosh-certs.tar.gz .
      on_success:
        put: bosh-certs
        params:
          file: generated-bosh-certs/bosh-certs.tar.gz
