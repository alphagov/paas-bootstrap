---
display:
  background_image: ((background_image_url))

meta:
  containers:
    awscli: &awscli-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/awscli
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77
    bosh-cli-v2: &gov-paas-bosh-cli-v2-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/bosh-cli-v2
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77
    certstrap: &certstrap-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/certstrap
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77
    git-ssh: &git-ssh-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/git-ssh
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77
    ruby-slim: &ruby-slim-image-resource
      type: docker-image
      source:
        repository: ruby
        tag: 2.7-slim
    self-update-pipelines: &self-update-pipelines-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/self-update-pipelines
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77
    spruce: &spruce-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/spruce
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77
    terraform: &terraform-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/terraform
        tag: 54495aab0a18ba76a55d98ae19f904d3629feb77

groups:
  - name: all
    jobs:
      - init-bucket
      - vpc
      - generate-secrets
      - bosh-terraform
      - generate-bosh-config
      - bosh-deploy
      - concourse-terraform
      - generate-concourse-config
      - concourse-deploy
      - cyber-terraform
      - post-deploy
      - expunge-concourse

  - name: credentials
    jobs:
      - clear-concourse-credentials
      - rotate-bosh-credentials
      - rotate-bosh-leaf-certs
      - delete-old-bosh-certs
      - check-certificates

resource_types:
- name: s3-iam
  type: docker-image
  source:
    repository: ghcr.io/alphagov/paas/s3-resource
    tag: 97e441efbfb06ac7fb09786fd74c64b05f9cc907

- name: semver-iam
  type: docker-image
  source:
    repository: ghcr.io/alphagov/paas/semver-resource
    tag: f2a80c95481056aa57d837e3b14f0012b542fdb3

resources:
  - name: paas-bootstrap
    type: git
    source:
      uri: https://github.com/alphagov/paas-bootstrap.git
      branch: ((branch_name))
      commit_verification_keys: ((gpg_public_keys))

  - name: paas-trusted-people
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: paas-trusted-people/users.yml
      initial_version: "-"
      initial_content_text: ""

  - name: bucket-terraform-state
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bucket.tfstate

  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: pipeline-trigger

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: vpc.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: bosh-ca
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-CA.tar.gz
      initial_version: "-"
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: bosh-ca-crt
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-CA.crt
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-certs
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-certs.tar.gz
      initial_version: "-"
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-secrets.yml
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-uaa-google-oauth-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-uaa-google-oauth-secrets.yml
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-cyber-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-cyber-secrets.yml
      initial_version: "-"
      initial_content_text: ""

  - name: bootstrap-cyber-tfvars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bootstrap-cyber.tfvars
      initial_version: "-"
      initial_content_text: ""

  - name: bootstrap-cyber-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: bootstrap-cyber.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: id_rsa
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: ""

  - name: ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: id_rsa.pub
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: ""

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh.tfstate
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: bosh-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-manifest.yml

  - name: bosh-manifest-pre-vars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-manifest-pre-vars.yml

  - name: bosh-vars-store
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-vars-store.yml
      initial_version: "-"
      initial_content_text: "{}"

  - name: bosh-init-state
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: ((bosh_manifest_state))
      initial_version: "-"
      # ID has to match value from the seed in the bosh-cli-v2 container:
      # https://github.com/alphagov/paas-docker-cloudfoundry-tools/blob/master/bosh-cli-v2/bosh_init_cache/minimal-state.json
      initial_content_text: |
        { "installation_id": "44f01911-a47a-4a24-6ca3-a3109b33f058" }

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: concourse.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 1,
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {}
                }
            ]
        }

  - name: git-ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa.pub
      region_name: ((aws_region))
      initial_version: "-"

  - name: git-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa
      region_name: ((aws_region))
      initial_version: "-"

  - name: concourse-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: concourse-manifest.yml

  - name: cpi-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cpi-config.yml

  - name: paas-bootstrap-cloud-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: paas-bootstrap-cloud-config.yml

jobs:
  - name: init-bucket
    serial: true
    plan:
      - get: paas-bootstrap

      - try:
          on_error:
            task: fail-try-block-if-not-bootstrap
            config:
              platform: linux
              image_resource: *gov-paas-bosh-cli-v2-image-resource
              params:
                TARGET_CONCOURSE: ((target_concourse))
                SELF_UPDATE_PIPELINE: ((self_update_pipeline))
              outputs:
                - name: self-update-pipeline-status
              run:
                path: sh
                args:
                  - -e
                  - -c
                  - |
                    echo "${TARGET_CONCOURSE}"

                    # If we are bootstrap and we error, it is okay
                    # If we are not bootstrap and we error, it is bad

                    if [ "$TARGET_CONCOURSE" = "bootstrap" ]; then
                      echo bootstrap > self-update-pipeline-status/state.txt
                      exit 0
                    fi

                    if [ "$SELF_UPDATE_PIPELINE" = "false" ]; then
                      echo skip > self-update-pipeline-status/state.txt
                      exit 0
                    fi

                    echo fail > self-update-pipeline-status/state.txt

          do:
            - task: set-initial-self-update-pipeline-status
              config:
                platform: linux
                image_resource: *gov-paas-bosh-cli-v2-image-resource
                outputs:
                  - name: self-update-pipeline-status
                run:
                  path: sh
                  args:
                    - -e
                    - -c
                    - |
                      # If self-update-pipelines does not succeed then fail
                      # We initially always mark as failed by default
                      echo fail > self-update-pipeline-status/state.txt

            - task: self-update-pipelines
              tags: [colocated-with-web]
              config:
                platform: linux
                image_resource: *self-update-pipelines-image-resource
                inputs:
                  - name: paas-bootstrap
                params:
                  DEPLOY_ENV: ((deploy_env))
                  BRANCH: ((branch_name))
                  MAKEFILE_ENV_TARGET: ((makefile_env_target))
                  AWS_DEFAULT_REGION: ((aws_region))
                  SKIP_COMMIT_VERIFICATION: ((skip_commit_verification))
                  SELF_UPDATE_PIPELINE: ((self_update_pipeline))
                  TARGET_CONCOURSE: ((target_concourse))
                  CONCOURSE_TYPE: ((concourse_type))
                  ENABLE_GITHUB: ((enable_github))

                  CONCOURSE_WEB_USER: admin
                  CONCOURSE_WEB_PASSWORD: ((concourse_web_password))
                run:
                  path: ./paas-bootstrap/concourse/scripts/self-update-pipeline.sh

            - task: mark-as-passed
              config:
                platform: linux
                image_resource: *gov-paas-bosh-cli-v2-image-resource
                outputs:
                  - name: self-update-pipeline-status
                run:
                  path: sh
                  args:
                    - -e
                    - -c
                    - |
                      # self-update-pipelines does has succeeded
                      echo pass > self-update-pipeline-status/state.txt

      - task: check-self-update-pipeline-status
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          params:
            TARGET_CONCOURSE: ((target_concourse))
          inputs:
            - name: self-update-pipeline-status
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                echo "target-concourse:            ${TARGET_CONCOURSE}"
                echo "self-update-pipeline-status: $(cat self-update-pipeline-status/state.txt)"

                if [ "$(cat self-update-pipeline-status/state.txt)" = "pass" ]; then
                  echo 'self-update-pipeline passed'
                  exit 0
                fi

                if [ "$(cat self-update-pipeline-status/state.txt)" = "skip" ]; then
                  echo 'self-update-pipeline skipped'
                  exit 0
                fi

                if [ "$(cat self-update-pipeline-status/state.txt)" = "bootstrap" ]; then
                  echo 'self-update-pipeline skipped because bootstrap'
                  exit 0
                fi

                echo 'self-update-pipeline failed'
                exit 1

      - task: try-fetch-bucket-state
        config:
          platform: linux
          image_resource: *awscli-image-resource
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          inputs:
            - name: paas-bootstrap
          outputs:
            - name: bucket-state
          run:
            path: sh
            args:
            - -e
            - -u
            - -c
            - |
              cd bucket-state
              aws s3 cp "s3://((state_bucket))/bucket.tfstate" . || true
              ls -l

      - task: create-init-bucket
        config:
          platform: linux
          image_resource: *terraform-image-resource
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_state_bucket: ((state_bucket))
            AWS_DEFAULT_REGION: ((aws_region))
          inputs:
            - name: paas-bootstrap
            - name: bucket-state
          outputs:
            - name: updated-bucket-state
          run:
            path: sh
            args:
            - -c
            - -e
            - |
              [ -f bucket-state/bucket.tfstate ] && cp bucket-state/bucket.tfstate updated-bucket-state/bucket.tfstate
              terraform init paas-bootstrap/terraform/bucket

              terraform apply \
                -auto-approve=true \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                -state=updated-bucket-state/bucket.tfstate \
                paas-bootstrap/terraform/bucket
        on_success:
          put: bucket-terraform-state
          params:
            file: updated-bucket-state/bucket.tfstate

      - put: pipeline-trigger
        params: {bump: patch}

  - name: vpc
    serial: true
    plan:
      - in_parallel:
        - get: paas-bootstrap
          trigger: true
          passed: ['init-bucket']
        - get: pipeline-trigger
          trigger: true
          passed: ['init-bucket']
        - get: vpc-tfstate
        - get: git-ssh-public-key
        - get: git-ssh-private-key

      - task: generate-git-ssh-keys
        config:
          platform: linux
          image_resource: *awscli-image-resource
          inputs:
          - name: paas-bootstrap
          - name: git-ssh-public-key
          - name: git-ssh-private-key
          outputs:
          - name: generated-git-ssh-keys
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -s git-ssh-public-key/git_id_rsa.pub ] && [ -s git-ssh-private-key/git_id_rsa ]; then
                echo "Git SSH keys already exist, skipping."
                cp git-ssh-public-key/git_id_rsa.pub generated-git-ssh-keys
                cp git-ssh-private-key/git_id_rsa generated-git-ssh-keys
                exit 0
              fi
              apk add --update openssh
              cd generated-git-ssh-keys
              ssh-keygen -t rsa -b 4096 -f git_id_rsa -N ''
        on_success:
          in_parallel:
            - put: git-ssh-public-key
              params:
                file: generated-git-ssh-keys/git_id_rsa.pub
            - put: git-ssh-private-key
              params:
                file: generated-git-ssh-keys/git_id_rsa

      - task: deploy-vpc
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          outputs:
          - name: updated-vpc-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              CONCOURSE_EGRESS_IP=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4)
              cp vpc-tfstate/vpc.tfstate updated-vpc-tfstate/vpc.tfstate
              terraform init paas-bootstrap/terraform/vpc

              terraform apply \
                -auto-approve=true \
                -var concourse_egress_cidr="${CONCOURSE_EGRESS_IP}/32" \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                -state=updated-vpc-tfstate/vpc.tfstate \
                paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: updated-vpc-tfstate/vpc.tfstate

  - name: cyber-terraform
    serial: true
    # This is not in the mainline of the pipeline
    # because we do not want to couple our deployment to Cyber
    plan:
      - in_parallel:
        - get: pipeline-trigger
          trigger: true
          passed: ['init-bucket']
        - get: paas-bootstrap
          passed: ['init-bucket']
        - get: bootstrap-cyber-tfvars
        - get: bootstrap-cyber-tfstate

      - task: terraform-apply
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
            - name: paas-bootstrap
            - name: bootstrap-cyber-tfstate
            - name: bootstrap-cyber-tfvars
          outputs:
            - name: updated-bootstrap-cyber-tfstate
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                cp bootstrap-cyber-tfstate/bootstrap-cyber.tfstate \
                   updated-bootstrap-cyber-tfstate/bootstrap-cyber.tfstate

                terraform init paas-bootstrap/terraform/cyber

                terraform apply \
                  -auto-approve=true \
                  -var env="((deploy_env))" \
                  -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                  -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                  -var-file="bootstrap-cyber-tfvars/bootstrap-cyber.tfvars" \
                  -state=updated-bootstrap-cyber-tfstate/bootstrap-cyber.tfstate \
                  paas-bootstrap/terraform/cyber

        ensure:
          put: bootstrap-cyber-tfstate
          params:
            file: updated-bootstrap-cyber-tfstate/bootstrap-cyber.tfstate

  - name: generate-secrets
    serial: true
    plan:
      - in_parallel:
        - get: paas-bootstrap
          passed: ['init-bucket']
        - get: pipeline-trigger
          passed: ['init-bucket']
          trigger: true
        - get: bosh-ca
        - get: bosh-ca-crt
        - get: bosh-secrets
        - get: ssh-private-key
        - get: ssh-public-key

      - task: generate-bosh-ca
        config:
          platform: linux
          image_resource: *certstrap-image-resource
          inputs:
            - name: paas-bootstrap
            - name: bosh-ca
              path: existing-bosh-ca
          outputs:
            - name: generated-bosh-ca
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if  [ -z "$(tar -tvzf existing-bosh-ca/bosh-CA.tar.gz)" ] ; then
                  certstrap init --years "10" --passphrase "" --common-name bosh-CA
                  ( cd out && tar -cvzf ../generated-bosh-ca/bosh-CA.tar.gz bosh-CA.* )
                else
                  echo "The CA cert already exists, skipping generation..."
                  cp existing-bosh-ca/bosh-CA.tar.gz generated-bosh-ca/bosh-CA.tar.gz
                  mkdir out
                  tar -xvzf generated-bosh-ca/bosh-CA.tar.gz -C out
                fi
                cp out/bosh-CA.crt generated-bosh-ca/bosh-CA.crt
        on_success:
          in_parallel:
            - put: bosh-ca
              params:
                file: generated-bosh-ca/bosh-CA.tar.gz
            - put: bosh-ca-crt
              params:
                file: generated-bosh-ca/bosh-CA.crt

      - in_parallel:
        - task: generate-bosh-secrets
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-bootstrap
              - name: bosh-secrets
                path: existing-bosh-secrets
            outputs:
              - name: generated-bosh-secrets
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  BUNDLE_GEMFILE=paas-bootstrap/Gemfile bundle install --without=default --with=secret_generator
                  ./paas-bootstrap/manifests/bosh-manifest/scripts/generate-bosh-secrets.rb \
                    --existing-secrets existing-bosh-secrets/bosh-secrets.yml \
                    > generated-bosh-secrets/bosh-secrets.yml
                  ls -l generated-bosh-secrets
          on_success:
            put: bosh-secrets
            params:
              file: generated-bosh-secrets/bosh-secrets.yml

        - task: generate-deployments-ssh-keypair
          config:
            platform: linux
            image_resource: *git-ssh-image-resource
            inputs:
              - name: paas-bootstrap
              - name: ssh-private-key
              - name: ssh-public-key
            outputs:
              - name: ssh-private-key-to-upload
              - name: ssh-public-key-to-upload
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if [ -s ssh-private-key/id_rsa ] && [ -s ssh-public-key/id_rsa.pub ]; then
                    echo "Deployment keys non-zero size, skipping generation..."
                    cp ssh-private-key/id_rsa ssh-private-key-to-upload
                    cp ssh-public-key/id_rsa.pub ssh-public-key-to-upload
                    exit 0
                  fi

                  echo "Generating new ssh key pair for deployments..."
                  ssh-keygen -t rsa -b 4096 -f id_rsa -N ''
                  cp id_rsa ssh-private-key-to-upload
                  cp id_rsa.pub ssh-public-key-to-upload
          on_success:
            try:
              in_parallel:
                - put: ssh-private-key
                  params:
                    file: ssh-private-key-to-upload/id_rsa
                - put: ssh-public-key
                  params:
                    file: ssh-public-key-to-upload/id_rsa.pub

  - name: bosh-terraform
    serial: true
    plan:
      - in_parallel:
        - get: pipeline-trigger
          trigger: true
          passed: ['generate-secrets', 'vpc', 'cyber-terraform']
        - get: paas-bootstrap
          passed: ['generate-secrets']
        - get: bosh-secrets
          passed: ['generate-secrets']
        - get: vpc-tfstate
          passed: ['vpc']
        - get: bosh-tfstate
        - get: bootstrap-cyber-tfvars
          passed: ['cyber-terraform']
        - get: ssh-public-key
          passed: ['generate-secrets']

      - task: extract-terraform-variables
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-secrets
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_yaml.rb \
                < bosh-secrets/bosh-secrets.yml > terraform-variables/bosh-secrets.tfvars.sh

      - task: terraform-apply
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
            - name: paas-bootstrap
            - name: terraform-variables
            - name: bosh-tfstate
            - name: ssh-public-key
            - name: bootstrap-cyber-tfvars
          outputs:
            - name: updated-bosh-tfstate
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            TF_VAR_bosh_az: ((bosh_az))
            TF_VAR_bosh_fqdn: ((bosh_fqdn))
            TF_VAR_bosh_fqdn_external: ((bosh_fqdn_external))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/bosh-secrets.tfvars.sh

                cp ssh-public-key/id_rsa.pub paas-bootstrap/terraform/bosh
                CONCOURSE_EGRESS_IP=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4)

                cp bosh-tfstate/bosh.tfstate updated-bosh-tfstate/bosh.tfstate
                terraform init paas-bootstrap/terraform/bosh

                terraform apply \
                  -auto-approve=true \
                  -var concourse_egress_cidr="${CONCOURSE_EGRESS_IP}/32" \
                  -var env="((deploy_env))" \
                  -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                  -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                  -var-file="bootstrap-cyber-tfvars/bootstrap-cyber.tfvars" \
                  -state=updated-bosh-tfstate/bosh.tfstate \
                  paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

  - name: generate-bosh-config
    serial_groups: [bosh-deploy]
    serial: true
    plan:
      - in_parallel:
        - get: pipeline-trigger
          trigger: true
          passed: ['bosh-terraform']
        - get: paas-bootstrap
          passed: ['bosh-terraform']
        - get: bosh-secrets
          passed: ['bosh-terraform']
        - get: bosh-ca
        - get: bosh-vars-store
        - get: vpc-tfstate
          passed: ['bosh-terraform']
        - get: bosh-tfstate
          passed: ['bosh-terraform']
        - get: bosh-uaa-google-oauth-secrets
        - get: bosh-cyber-secrets
        - get: paas-trusted-people

      - task: extract-terraform-outputs
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-tfstate
          outputs:
            - name: terraform-outputs
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < vpc-tfstate/vpc.tfstate \
                  > terraform-outputs/vpc-terraform-outputs.yml
                ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < bosh-tfstate/bosh.tfstate \
                  > terraform-outputs/bosh-terraform-outputs.yml

      - task: generate-uaa-users
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-bootstrap
            - name: paas-trusted-people
          outputs:
            - name: uaa-users-ops-file
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                paas-bootstrap/manifests/bosh-manifest/scripts/generate-uaa-users-ops-file.rb \
                  paas-trusted-people/users.yml "((aws_account))" > uaa-users-ops-file/uaa-users-ops-file.yml
                cat uaa-users-ops-file/uaa-users-ops-file.yml

      - task: generate-unix-users
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-bootstrap
            - name: paas-trusted-people
          outputs:
            - name: unix-users-ops-file
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                paas-bootstrap/manifests/bosh-manifest/scripts/generate-unix-users-ops-file.rb \
                  paas-trusted-people/users.yml "((aws_account))" > unix-users-ops-file/unix-users-ops-file.yml
                cat unix-users-ops-file/unix-users-ops-file.yml

      - task: render-bosh-manifest
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-bootstrap
            - name: terraform-outputs
            - name: bosh-secrets
            - name: bosh-ca
            - name: bosh-vars-store
            - name: bosh-uaa-google-oauth-secrets
            - name: bosh-cyber-secrets
            - name: unix-users-ops-file
            - name: uaa-users-ops-file
          outputs:
            - name: bosh-manifest
            - name: bosh-manifest-pre-vars
            - name: bosh-vars-store-updated
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            AWS_DEFAULT_REGION: ((aws_region))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            BOSH_FQDN: ((bosh_fqdn))
            BOSH_FQDN_EXTERNAL: ((bosh_fqdn_external))
            BOSH_INSTANCE_PROFILE: ((bosh_instance_profile))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                mkdir -p certs
                tar -xvzf bosh-ca/bosh-CA.tar.gz -C certs

                paas-bootstrap/manifests/bosh-manifest/scripts/generate-manifest.sh \
                  > bosh-manifest-pre-vars/bosh-manifest-pre-vars.yml

                cp bosh-vars-store/bosh-vars-store.yml bosh-vars-store-updated/bosh-vars-store.yml

                paas-bootstrap/manifests/bosh-manifest/scripts/cleanup-bosh-vars-store.rb \
                  bosh-vars-store-updated/bosh-vars-store.yml

                VARS_STORE=bosh-vars-store-updated/bosh-vars-store.yml \
                  paas-bootstrap/manifests/bosh-manifest/scripts/generate-manifest.sh \
                    > bosh-manifest/bosh-manifest.yml
        on_success:
          in_parallel:
          - put: bosh-manifest
            params:
              file: bosh-manifest/bosh-manifest.yml
          - put: bosh-manifest-pre-vars
            params:
              file: bosh-manifest-pre-vars/bosh-manifest-pre-vars.yml
          - put: bosh-vars-store
            params:
              file: bosh-vars-store-updated/bosh-vars-store.yml

  - name: bosh-deploy
    serial: true
    plan:
      - in_parallel:
        - get: pipeline-trigger
          passed: ['generate-bosh-config']
          trigger: true
        - get: bosh-manifest
          passed: ['generate-bosh-config']
        - get: paas-bootstrap
          passed: ['generate-bosh-config']
        - get: bosh-vars-store
          passed: ['generate-bosh-config']
        - get: paas-trusted-people
          passed: ['generate-bosh-config']
        - get: bosh-ca-crt
          passed: ['generate-secrets']
        - get: bosh-init-state
        - get: ssh-private-key

      - task: bosh-create-env
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: bosh-manifest
            - name: bosh-init-state
            - name: ssh-private-key
          outputs:
            - name: bosh-init-working-dir
          params:
            BOSH_MANIFEST_STATE: ((bosh_manifest_state))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                mkdir -p bosh-init-working-dir/.ssh
                cp ssh-private-key/id_rsa bosh-init-working-dir/.ssh/id_rsa
                chmod 400 bosh-init-working-dir/.ssh/id_rsa
                cp bosh-manifest/bosh-manifest.yml bosh-init-working-dir/bosh-manifest.yml
                cp bosh-init-state/"${BOSH_MANIFEST_STATE}" bosh-init-working-dir/bosh-manifest-state.json
                bosh -n create-env bosh-init-working-dir/bosh-manifest.yml \
                  --state=bosh-init-working-dir/bosh-manifest-state.json
        ensure:
          put: bosh-init-state
          params:
            file: "bosh-init-working-dir/bosh-manifest-state.json"

      - task: update-runtime-config
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: bosh-vars-store
            - name: paas-bootstrap
            - name: paas-trusted-people
            - name: bosh-ca-crt
            - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-ca-crt/bosh-CA.crt
            BOSH_NON_INTERACTIVE: true

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa

            AWS_REGION: ((aws_region))
            DEPLOY_ENV: ((deploy_env))
          run:
            path: bash
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
                # shellcheck disable=SC2240
                . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start
                BOSH_CLIENT="admin"
                BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
                export BOSH_CLIENT
                export BOSH_CLIENT_SECRET

                mkdir -p unix-users-ops-file
                paas-bootstrap/manifests/runtime-config/scripts/generate-unix-users-ops-file.rb \
                  paas-trusted-people/users.yml "((aws_account))" > unix-users-ops-file/unix-users-ops-file.yml

                bosh -n update-runtime-config \
                  --var "deploy_env=$DEPLOY_ENV" \
                  --var "aws_region=$AWS_REGION" \
                  <(./paas-bootstrap/manifests/runtime-config/scripts/generate-runtime-config.sh)

                bosh runtime-config

  - name: concourse-terraform
    serial: true
    plan:
      - in_parallel:
        - get: paas-bootstrap
          passed: ['bosh-terraform']
        - get: pipeline-trigger
          trigger: true
          passed: ['bosh-terraform']
        - get: vpc-tfstate
          passed: ['bosh-terraform']
        - get: bosh-tfstate
          passed: ['bosh-terraform']
        - get: concourse-tfstate
        - get: git-ssh-public-key

      - task: terraform-outputs-to-sh
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate \
              > bosh-terraform-outputs/tfvars.sh
              ls -l bosh-terraform-outputs/tfvars.sh

      - task: terraform-apply
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          - name: concourse-tfstate
          - name: git-ssh-public-key
          outputs:
          - name: updated-concourse-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_concourse_hostname: ((concourse_hostname))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              . bosh-terraform-outputs/tfvars.sh
              export TF_VAR_git_rsa_id_pub
              TF_VAR_git_rsa_id_pub=$(cat git-ssh-public-key/git_id_rsa.pub)
              CONCOURSE_EGRESS_IP=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4)

              cp concourse-tfstate/concourse.tfstate updated-concourse-tfstate/concourse.tfstate
              terraform init paas-bootstrap/terraform/concourse

              terraform apply \
                -auto-approve=true \
                -var concourse_egress_cidr="${CONCOURSE_EGRESS_IP}/32" \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                -state=updated-concourse-tfstate/concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: updated-concourse-tfstate/concourse.tfstate

  - name: generate-concourse-config
    serial: true
    plan:
      - in_parallel:
        - get: paas-bootstrap
          passed: ['concourse-terraform']
        - get: pipeline-trigger
          trigger: true
          passed: ['concourse-terraform']
        - get: vpc-tfstate
          passed: ['concourse-terraform']
        - get: concourse-tfstate
          passed: ['concourse-terraform']
        - get: bosh-secrets
          passed: ['generate-bosh-config']
        - get: bosh-tfstate
          passed: ['concourse-terraform']
      - task: terraform-outputs-to-yaml
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
          - name: paas-bootstrap
          - name: concourse-tfstate
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < vpc-tfstate/vpc.tfstate \
              > terraform-outputs/vpc-terraform-outputs.yml
              ls -l terraform-outputs/vpc-terraform-outputs.yml

              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < concourse-tfstate/concourse.tfstate \
              > terraform-outputs/concourse-terraform-outputs.yml
              ls -l terraform-outputs/concourse-terraform-outputs.yml

              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < bosh-tfstate/bosh.tfstate \
              > terraform-outputs/bosh-terraform-outputs.yml
              ls -l terraform-outputs/bosh-terraform-outputs.yml

      - task: generate-cpi-cloud-config
        config:
          platform: linux
          image_resource: *spruce-image-resource
          inputs:
            - name: paas-bootstrap
            - name: terraform-outputs
          outputs:
            - name: cpi-config
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                spruce merge \
                  terraform-outputs/concourse-terraform-outputs.yml \
                  terraform-outputs/vpc-terraform-outputs.yml \
                  terraform-outputs/bosh-terraform-outputs.yml \
                  paas-bootstrap/manifests/cpi-config/cpi-config.yml \
                | spruce merge \
                  --cherry-pick cpis \
                  > cpi-config/cpi-config.yml

                cat cpi-config/cpi-config.yml
        on_success:
          put: cpi-config
          params:
            file: cpi-config/cpi-config.yml

      - task: generate-paas-bootstrap-cloud-config
        config:
          platform: linux
          image_resource: *spruce-image-resource
          inputs:
            - name: paas-bootstrap
            - name: terraform-outputs
          outputs:
            - name: paas-bootstrap-cloud-config
          params:
            CONCOURSE_INSTANCE_TYPE: ((concourse_instance_type))
            CONCOURSE_INSTANCE_PROFILE: ((concourse_instance_profile))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                spruce merge \
                  terraform-outputs/concourse-terraform-outputs.yml \
                  terraform-outputs/vpc-terraform-outputs.yml \
                  terraform-outputs/bosh-terraform-outputs.yml \
                  paas-bootstrap/manifests/cloud-config/paas-bootstrap-cloud-config.yml \
                | spruce merge \
                  --cherry-pick azs \
                  --cherry-pick compilation \
                  --cherry-pick networks \
                  --cherry-pick vm_extensions \
                  --cherry-pick vm_types \
                  > paas-bootstrap-cloud-config/paas-bootstrap-cloud-config.yml

                cat paas-bootstrap-cloud-config/paas-bootstrap-cloud-config.yml
        on_success:
          put: paas-bootstrap-cloud-config
          params:
            file: paas-bootstrap-cloud-config/paas-bootstrap-cloud-config.yml

      - task: generate-concourse-manifest
        config:
          platform: linux
          image_resource: *spruce-image-resource
          params:
            AWS_ACCOUNT: ((aws_account))
            AWS_REGION: ((aws_region))
            CONCOURSE_AUTH_DURATION: ((concourse_auth_duration))
            CONCOURSE_INSTANCE_TYPE: ((concourse_instance_type))
            CONCOURSE_INSTANCE_PROFILE: ((concourse_instance_profile))
            ENABLE_GITHUB: ((enable_github))
            GITHUB_CLIENT_ID: ((github_client_id))
            GITHUB_CLIENT_SECRET: ((github_client_secret))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
          inputs:
          - name: paas-bootstrap
          - name: bosh-secrets
          - name: terraform-outputs
          outputs:
          - name: concourse-manifest
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/manifests/concourse-manifest/scripts/generate-manifest.sh > concourse-manifest/concourse-manifest.yml
              ls -l concourse-manifest/concourse-manifest.yml
        on_success:
          put: concourse-manifest
          params:
            file: concourse-manifest/concourse-manifest.yml

  - name: concourse-deploy
    serial: true
    interruptible: true
    plan:
      - in_parallel:
        - get: paas-bootstrap
          passed: ['generate-concourse-config']
        - get: cpi-config
          passed: ['generate-concourse-config']
        - get: paas-bootstrap-cloud-config
          passed: ['generate-concourse-config']
        - get: pipeline-trigger
          trigger: true
          passed: ['generate-concourse-config', 'bosh-deploy']
        - get: bosh-vars-store
        - get: concourse-manifest
          passed: ['generate-concourse-config']
        - get: bosh-ca-crt
          passed: ['generate-secrets']
        - get: ssh-private-key

      - task: upload-cpi-config
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: cpi-config
            - name: bosh-vars-store
            - name: paas-bootstrap
            - name: bosh-ca-crt
            - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-ca-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
            BOSH_NON_INTERACTIVE: true

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa
          run:
            path: bash
            args:
              - -e
              - -u
              - -c
              - |
                # shellcheck disable=SC2240
                . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start

                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
                BOSH_CLIENT="admin"
                BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
                export BOSH_CLIENT
                export BOSH_CLIENT_SECRET

                bosh update-cpi-config cpi-config/cpi-config.yml

      - task: upload-paas-bootstrap-cloud-config
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-bootstrap-cloud-config
            - name: bosh-vars-store
            - name: paas-bootstrap
            - name: bosh-ca-crt
            - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-ca-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
            BOSH_NON_INTERACTIVE: true

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa
          run:
            path: bash
            args:
              - -e
              - -u
              - -c
              - |
                # shellcheck disable=SC2240
                . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start

                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
                BOSH_CLIENT="admin"
                BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
                export BOSH_CLIENT
                export BOSH_CLIENT_SECRET

                bosh update-config \
                  --name paas-bootstrap \
                  --type cloud \
                  paas-bootstrap-cloud-config/paas-bootstrap-cloud-config.yml

                # TODO delete me after paas-cf has been migrated This step is
                # necessary because we cannot have overlapping cloud configs,
                # i.e. having compilation defined twice
                if bosh config --type=cloud --name=default; then
                  echo 'Deleting old combined cloud-config'
                  bosh delete-config --type=cloud --name=default
                else
                  echo 'No default cloud config found'
                  echo 'You should delete this if statement'
                fi

      - task: get-and-upload-stemcell
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: bosh-vars-store
            - name: paas-bootstrap
            - name: bosh-ca-crt
            - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-ca-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
            BOSH_NON_INTERACTIVE: true

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa
          run:
            path: bash
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb

                STEMCELL_VERSION=$($VAL_FROM_YAML meta.stemcell.version paas-bootstrap/manifests/concourse-manifest/concourse-base.yml)
                STEMCELL_NAME=$($VAL_FROM_YAML meta.stemcell.name paas-bootstrap/manifests/concourse-manifest/concourse-base.yml)

                wget "https://bosh.io/d/stemcells/${STEMCELL_NAME}?v=${STEMCELL_VERSION}" -O stemcell.tgz

                # shellcheck disable=SC2240
                . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start

                BOSH_CLIENT="admin"
                BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
                export BOSH_CLIENT
                export BOSH_CLIENT_SECRET

                bosh -n upload-stemcell stemcell.tgz

      - task: deploy-concourse
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
          - name: concourse-manifest
          - name: bosh-vars-store
          - name: paas-bootstrap
          - name: bosh-ca-crt
          - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-ca-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
            BOSH_NON_INTERACTIVE: true

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa

            CONCOURSE_WEB_INSTANCES: ((concourse_web_instances))
            CONCOURSE_WORKER_INSTANCES: ((concourse_worker_instances))
          run:
            path: bash
            args:
            - -e
            - -u
            - -c
            - |
              # shellcheck disable=SC2240
              . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start

              VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
              BOSH_CLIENT="admin"
              BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
              export BOSH_CLIENT
              export BOSH_CLIENT_SECRET

              bosh deploy concourse-manifest/concourse-manifest.yml \
                   -v "concourse_web_instances=$CONCOURSE_WEB_INSTANCES" \
                   -v "concourse_worker_instances=$CONCOURSE_WORKER_INSTANCES" \
                   --var-file=credhub_ca_cert=bosh-ca-crt/bosh-CA.crt

  - name: post-deploy
    serial: true
    plan:
      - in_parallel:
        - get: pipeline-trigger
          passed: ['concourse-deploy']
          trigger: true
        - get: paas-bootstrap
          passed: ['concourse-deploy']
        - get: bosh-vars-store
          passed: ['concourse-deploy']
        - get: bosh-secrets
          passed: ['generate-secrets']
        - get: bosh-ca-crt
          passed: ['generate-secrets']
        - get: ssh-private-key

      - task: upload-concourse-web-password
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: bosh-secrets
            - name: paas-bootstrap
            - name: bosh-vars-store
            - name: bosh-ca-crt
            - name: ssh-private-key
          outputs:
            - name: upload-pipeline-secrets
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa

            TARGET_CONCOURSE: ((target_concourse))
            DEPLOY_ENV: ((deploy_env))
          run:
            path: bash
            args:
              - -e
              - -c
              - |

                if [ "${TARGET_CONCOURSE}" = "bootstrap" ]; then
                  # shellcheck disable=SC2240
                  . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start
                  export HTTPS_PROXY="$BOSH_ALL_PROXY"
                fi

                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
                CREDHUB_CLIENT=credhub-admin
                CREDHUB_CLIENT_SECRET=$($VAL_FROM_YAML secrets.bosh_credhub_admin_client_password bosh-secrets/bosh-secrets.yml)

                CREDHUB_CA_CERT="$(cat <<EOCERT
                $($VAL_FROM_YAML credhub_tls.ca bosh-vars-store/bosh-vars-store.yml)
                $($VAL_FROM_YAML uaa_ssl.ca bosh-vars-store/bosh-vars-store.yml)
                EOCERT
                )"
                export CREDHUB_CA_CERT

                credhub api -s "$BOSH_ENVIRONMENT:8844/api"

                credhub login --client-name="${CREDHUB_CLIENT}" --client-secret="${CREDHUB_CLIENT_SECRET}"

                echo "Getting /${DEPLOY_ENV}/concourse/concourse_web_password"
                concourse_web_password="$(credhub get -q --name "/${DEPLOY_ENV}/concourse/concourse_web_password" | tr -d '[:space:]')"

                echo 'Setting /concourse/main/concourse_web_password'
                credhub set --name=/concourse/main/concourse_web_password --type password --password "${concourse_web_password}"

                # This is for upload-pipelines task
                # which must use the concourse_web_password
                # so that the pipelines can be set by either the bootstrap concourse
                # or the regular concourse
                echo "$concourse_web_password" > upload-pipeline-secrets/concourse_web_password.txt

      - task: test-bosh-vms
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
          - name: paas-bootstrap
          - name: bosh-vars-store
          - name: bosh-ca-crt
          - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-ca-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: concourse
            BOSH_NON_INTERACTIVE: true

            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa
          run:
            path: bash
            args:
            - -e
            - -c
            - |
              # shellcheck disable=SC2240
              . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start

              VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
              BOSH_CLIENT="admin"
              BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
              export BOSH_CLIENT
              export BOSH_CLIENT_SECRET

              bosh deployment
              bosh vms | tee vms.txt
              [ "$(grep '|' vms.txt | grep -cEv "(^\|\ \ |\-\-|VM|running)")" -eq 0 ]

      - task: migrate-vars-to-credhub
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
          - name: bosh-secrets
          - name: paas-bootstrap
          - name: bosh-vars-store
          - name: bosh-ca-crt
          - name: ssh-private-key
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_GW_HOST: ((bosh_login_host))
            BOSH_GW_USER: vcap
            BOSH_GW_PRIVATE_KEY: ./ssh-private-key/id_rsa
            TARGET_CONCOURSE: ((target_concourse))
          run:
            path: bash
            args:
            - -e
            - -c
            - |

              if [ "${TARGET_CONCOURSE}" = "bootstrap" ]; then
                # shellcheck disable=SC2240
                . ./paas-bootstrap/concourse/scripts/bosh-tunnel.sh start
                export HTTPS_PROXY="$BOSH_ALL_PROXY"
              fi

              VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb
              CREDHUB_CLIENT=credhub-admin
              CREDHUB_CLIENT_SECRET=$($VAL_FROM_YAML secrets.bosh_credhub_admin_client_password bosh-secrets/bosh-secrets.yml)
              VCAP_PASSWORD=$($VAL_FROM_YAML secrets.vcap_password bosh-secrets/bosh-secrets.yml)

              CREDHUB_CA_CERT="$(cat <<EOCERT
              $($VAL_FROM_YAML credhub_tls.ca bosh-vars-store/bosh-vars-store.yml)
              $($VAL_FROM_YAML uaa_ssl.ca bosh-vars-store/bosh-vars-store.yml)
              EOCERT
              )"
              export CREDHUB_CA_CERT
              BOSH_CA_CERT="$(cat bosh-ca-crt/bosh-CA.crt)"
              BOSH_CLIENT_SECRET=$($VAL_FROM_YAML admin_password bosh-vars-store/bosh-vars-store.yml)
              BOSH_EXPORTER_PASSWORD=$($VAL_FROM_YAML bosh_exporter_password bosh-vars-store/bosh-vars-store.yml)

              credhub api -s "$BOSH_ENVIRONMENT:8844/api"

              credhub login --client-name="${CREDHUB_CLIENT}" --client-secret="${CREDHUB_CLIENT_SECRET}"

              credhub find --path=/
              credhub set --name=/concourse/main/create-bosh-concourse/test-secret --type value --value "{\"date\": $(date +%s)}"
              credhub set --name=/concourse/main/bosh-credhub-admin --type password --password "${CREDHUB_CLIENT_SECRET}"

              # This is a value because we do not want to store the private key
              credhub set --name=/concourse/main/bosh-credhub-ca-cert --type value --value "${CREDHUB_CA_CERT}"
              credhub set --name=/concourse/main/bosh-ca-cert --type value --value "${BOSH_CA_CERT}"
              credhub set --name=/concourse/main/bosh-client-secret --type value --value "${BOSH_CLIENT_SECRET}"
              credhub set --name=/concourse/main/bosh-exporter-password --type value --value "${BOSH_EXPORTER_PASSWORD}"
              credhub set --name=/concourse/main/vcap-password --type value --value "${VCAP_PASSWORD}"

              credhub find --path=/

      - try:
          on_error:
            task: check-if-bootstrap-fail-if-not
            config:
              platform: linux
              image_resource: *gov-paas-bosh-cli-v2-image-resource
              params:
                TARGET_CONCOURSE: ((target_concourse))
              outputs:
                - name: check-if-bootstrap
              run:
                path: sh
                args:
                  - -e
                  - -c
                  - |
                    echo "${TARGET_CONCOURSE}"

                    if [ "$TARGET_CONCOURSE" = "bootstrap" ]; then
                      echo This concourse is bootstrap, passing this test
                      echo pass > check-if-bootstrap/concourse.txt
                    else
                      echo This concourse is not bootstrap and the test failed
                      echo fail > check-if-bootstrap/concourse.txt
                    fi

          do:
            - task: test-concourse-credhub-retrieval
              config:
                platform: linux
                image_resource: *gov-paas-bosh-cli-v2-image-resource
                params:
                  TEST_SECRET: ((test-secret))
                run:
                  path: sh
                  args:
                    - -e
                    - -c
                    - |
                      echo "${TEST_SECRET}"

            - task: test-credhub-certificate-imports-work
              config:
                platform: linux
                image_resource: *gov-paas-bosh-cli-v2-image-resource
                params:
                  BOSH_ENVIRONMENT: ((bosh_fqdn))
                  CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
                  CREDHUB_CLIENT: credhub-admin
                  CREDHUB_CLIENT_SECRET: ((bosh-credhub-admin))
                run:
                  path: bash
                  args:
                    - -e
                    - -c
                    - |
                      credhub api -s "$BOSH_ENVIRONMENT:8844/api"

                      credhub login \
                        --client-name="${CREDHUB_CLIENT}" \
                        --client-secret="${CREDHUB_CLIENT_SECRET}"

                      echo 'Cleaning up previously used credentials if they exist'
                      credhub delete --name /paas-bootstrap-tests/bosh-generated-cert || true
                      credhub delete --name /paas-bootstrap-tests/bosh-generated-ca || true

                      variable_value='(('
                      variable_value+='bosh_generated_ca'
                      variable_value+='))'

                      cat > test-credentials.yml.tpl <<EOF
                      variables:
                      - name: bosh_generated_ca
                        type: certificate
                        options:
                          is_ca: true
                          common_name: bosh.io

                      credentials:
                      - name: /paas-bootstrap-tests/bosh-generated-ca
                        type: certificate
                        value: ${variable_value}
                      EOF

                      bosh interpolate \
                        --vars-store vars.yml \
                        test-credentials.yml.tpl \
                      > test-credentials.yml

                      echo 'Importing credentials'
                      credhub import -f test-credentials.yml

                      echo 'Generating credentials'
                      credhub generate \
                        --name /paas-bootstrap-tests/bosh-issued-cert \
                        --type certificate \
                        --ca /paas-bootstrap-tests/bosh-generated-ca \
                        --common-name "paas-bootstrap-test.cloud.service.gov.uk"

                      credhub get \
                        --name /paas-bootstrap-tests/bosh-issued-cert \
                        --key certificate \
                      > bosh-issued-cert.pem

                      credhub get \
                        --name /paas-bootstrap-tests/bosh-issued-cert \
                        --key ca \
                      > bosh-issued-ca.pem

                      echo 'Verifying certificate chain'
                      openssl verify \
                        -verbose \
                        -issuer_checks \
                        -CAfile bosh-issued-ca.pem \
                        bosh-issued-cert.pem

            - task: mark-credhub-tests-as-passed
              config:
                platform: linux
                image_resource: *gov-paas-bosh-cli-v2-image-resource
                outputs:
                  - name: check-if-bootstrap
                run:
                  path: sh
                  args:
                    - -e
                    - -c
                    - |
                      echo pass > check-if-bootstrap/concourse.txt

      - task: check-if-bootstrap-or-concourse-credhub-retrieval
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: check-if-bootstrap
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if [ "$(cat check-if-bootstrap/concourse.txt)" = "pass" ]; then
                  echo Either bootstrap or test passed
                  exit 0
                fi
                echo Test failed
                exit 1

      - task: upload-pipeline
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *self-update-pipelines-image-resource
          inputs:
            - name: paas-bootstrap
            - name: upload-pipeline-secrets
          params:
            AWS_ACCOUNT: ((aws_account))
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            MAKEFILE_ENV_TARGET: ((makefile_env_target))
            AWS_DEFAULT_REGION: ((aws_region))
            SKIP_COMMIT_VERIFICATION: ((skip_commit_verification))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            CONCOURSE_TYPE: ((concourse_type))
            ENABLE_GITHUB: ((enable_github))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                # We cannot use native credentials fetching here because bootstrap
                CONCOURSE_WEB_USER="admin"
                CONCOURSE_WEB_PASSWORD="$(cat upload-pipeline-secrets/concourse_web_password.txt)"
                export CONCOURSE_WEB_USER CONCOURSE_WEB_PASSWORD

                make -C ./paas-bootstrap "${MAKEFILE_ENV_TARGET}" "${CONCOURSE_TYPE}" pipelines

  - name: expunge-concourse
    serial: true
    plan:
      - in_parallel:
        - get: paas-bootstrap
          passed: ['post-deploy']
        - get: pipeline-trigger
          trigger: true
          passed: ['post-deploy']
        - get: vpc-tfstate
        - get: bosh-tfstate
        - get: concourse-tfstate
        - get: bootstrap-cyber-tfvars

      - task: terraform-outputs-to-sh
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate \
              > bosh-terraform-outputs/tfvars.sh
              ls -l bosh-terraform-outputs/tfvars.sh

      - task: remove-concourse-ip-from-ssh-sg
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          outputs:
          - name: updated-vpc-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cp vpc-tfstate/vpc.tfstate updated-vpc-tfstate/vpc.tfstate
              terraform init paas-bootstrap/terraform/vpc

              terraform apply \
                -auto-approve=true \
                -target=aws_security_group.office-access-ssh \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                -target=aws_subnet.infra \
                -state=updated-vpc-tfstate/vpc.tfstate \
                paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: updated-vpc-tfstate/vpc.tfstate

      - task: remove-concourse-ip-from-bosh-sg
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-tfstate
          - name: bootstrap-cyber-tfvars
          outputs:
          - name: updated-bosh-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            TF_VAR_bosh_fqdn: ((bosh_fqdn))
            TF_VAR_bosh_fqdn_external: ((bosh_fqdn_external))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              export TF_VAR_secrets_bosh_postgres_password=""
              export TF_VAR_bosh_az=""

              cp bosh-tfstate/bosh.tfstate updated-bosh-tfstate/bosh.tfstate
              terraform init paas-bootstrap/terraform/bosh

              terraform apply \
                -auto-approve=true \
                -target=aws_security_group.bosh \
                -state=updated-bosh-tfstate/bosh.tfstate \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                -var-file="bootstrap-cyber-tfvars/bootstrap-cyber.tfvars" \
                paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

      - task: remove-concourse-ip-from-concourse-sg
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          - name: concourse-tfstate
          outputs:
          - name: updated-concourse-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_concourse_hostname: ((concourse_hostname))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_system_dns_zone_id: ((system_dns_zone_id))
            TF_VAR_git_rsa_id_pub: ""
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              . bosh-terraform-outputs/tfvars.sh

              cp concourse-tfstate/concourse.tfstate updated-concourse-tfstate/concourse.tfstate
              terraform init paas-bootstrap/terraform/concourse

              terraform apply \
                -auto-approve=true \
                -target=aws_security_group.concourse \
                -var-file="paas-bootstrap/terraform/((aws_account)).tfvars" \
                -var-file="paas-bootstrap/terraform/((aws_region)).tfvars" \
                -state=updated-concourse-tfstate/concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: updated-concourse-tfstate/concourse.tfstate

  - name: clear-concourse-credentials
    plan:
      - get: paas-bootstrap

      - task: clear-ssh-keys
        file: paas-bootstrap/concourse/tasks/delete-ssh-keys.yml
        params:
          AWS_DEFAULT_REGION: ((aws_region))
          BUCKET: ((state_bucket))
          SSH_KEY_PREFIX: concourse_

  - name: rotate-bosh-credentials
    plan:
      - in_parallel:
        - get: bosh-vars-store
        - get: bosh-manifest-pre-vars
        - get: paas-bootstrap
      - task: rotate-bosh-secrets
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-bootstrap
            - name: bosh-vars-store
            - name: bosh-manifest-pre-vars
          outputs:
            - name: modified-secrets
            - name: modified-bosh-vars-store
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                # Wipe all the file
                echo {} > modified-secrets/bosh-secrets.yml

                ./paas-bootstrap/manifests/shared/scripts/rotate-vars-store-secrets.rb \
                  --vars-store bosh-vars-store/bosh-vars-store.yml \
                  --manifest bosh-manifest-pre-vars/bosh-manifest-pre-vars.yml \
                  --passwords \
                  --ssh \
                  --rsa \
                  > modified-bosh-vars-store/bosh-vars-store.yml
        on_success:
          in_parallel:
          - put: bosh-vars-store
            params:
              file: modified-bosh-vars-store/bosh-vars-store.yml
          - put: bosh-secrets
            params:
              file: modified-secrets/bosh-secrets.yml
      - task: clear-ssh-keys
        file: paas-bootstrap/concourse/tasks/delete-ssh-keys.yml
        params:
          AWS_DEFAULT_REGION: ((aws_region))
          BUCKET: ((state_bucket))
          SSH_KEY_PREFIX: bosh_

  - name: rotate-bosh-leaf-certs
    serial: true
    plan:
    - in_parallel:
      - get: paas-bootstrap
      - get: bosh-vars-store
      - get: bosh-manifest-pre-vars
    - task: rotate-bosh-leaf-certs
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: paas-bootstrap
          - name: bosh-manifest-pre-vars
          - name: bosh-vars-store
        outputs:
          - name: updated-bosh-vars-store
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-bootstrap/manifests/shared/scripts/rotate-vars-store-secrets.rb --leaf \
                --manifest bosh-manifest-pre-vars/bosh-manifest-pre-vars.yml \
                --vars-store bosh-vars-store/bosh-vars-store.yml \
                > updated-bosh-vars-store/bosh-vars-store.yml
      on_success:
        put: bosh-vars-store
        params:
          file: updated-bosh-vars-store/bosh-vars-store.yml

  - name: delete-old-bosh-certs
    serial: true
    plan:
    - in_parallel:
      - get: paas-bootstrap
      - get: bosh-vars-store
    - task: delete-old-bosh-internal-certs
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: paas-bootstrap
          - name: bosh-vars-store
        outputs:
          - name: updated-bosh-vars-store
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-bootstrap/manifests/shared/scripts/rotate-vars-store-secrets.rb --delete \
                --manifest bosh-manifest-pre-vars/bosh-manifest-pre-vars.yml \
                --vars-store bosh-vars-store/bosh-vars-store.yml \
                > updated-bosh-certs/bosh-vars-store.yml
      on_success:
        put: bosh-certs
        params:
          file: updated-bosh-vars-store/bosh-vars-store.tar.gz

  - name: check-certificates
    serial: true
    plan:

    - in_parallel:
      - get: bosh-manifest-pre-vars
      - get: bosh-vars-store

    - task: check-certificates
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: bosh-manifest-pre-vars
          - name: bosh-vars-store
        run:
          path: ruby
          args:
            - -e
            - |
              # rubocop:disable Layout/MultilineMethodCallIndentation
              # rubocop:disable Metrics/MethodLength
              # rubocop:disable Metrics/CyclomaticComplexity
              # rubocop:disable Metrics/AbcSize
              #
              # frozen_string_literal: true

              require 'openssl'
              require 'yaml'

              CERT_REGEX = /[-]{5}\s*BEGIN CERTIFICATE\s*[-]{5}[^-]*[-]{5}\s*END CERTIFICATE\s*[-]{5}/m.freeze

              ManifestCert = Struct.new(:filepath, :path, :cert, keyword_init: true)

              def find_certificates(yaml, path)
                return [] if yaml.is_a? Numeric
                return [] if yaml.is_a? TrueClass
                return [] if yaml.is_a? FalseClass

                if yaml.is_a? String
                  return yaml.scan(CERT_REGEX).map do |cert_str|
                    ManifestCert.new(
                      path: path,
                      cert: OpenSSL::X509::Certificate.new(cert_str)
                    )
                  end
                end

                if yaml.is_a? Array
                  return yaml.each_with_index.map do |v, k|
                    find_certificates(v, "#{path}/#{k}")
                  end
                end

                if yaml.is_a? Hash
                  return yaml.map do |k, v|
                    find_certificates(v, "#{path}/#{k}")
                  end
                end

                raise "Unknown class #{yaml.class}"
              end

              manifest_certs = []

              Dir
                .glob('**/*.y*ml')
                .each do |filepath|
                  puts "Finding certificates in #{filepath}"
                  yaml = YAML.safe_load(File.read(filepath))

                  initial_path = ''
                  certs = find_certificates(yaml, initial_path).flatten
                  certs.each { |cert| cert.filepath = filepath }

                  puts "Found #{certs.length} certs"

                  manifest_certs += certs
                end

              expd_manifest_certs = manifest_certs.select do |cert|
                cert.cert.not_after <= Time.now
              end

              thirty_days_time = Time.now + (30 * 86_400)
              exp_manifest_certs = manifest_certs
                .select { |cert| cert.cert.not_after <= thirty_days_time }
                .select { |cert| cert.cert.not_after >= Time.now }

              puts
              puts "Found #{manifest_certs.length} certs"

              puts
              puts "Found #{expd_manifest_certs.length} expired certs:"
              expd_manifest_certs.group_by(&:filepath).each do |filepath, certs|
                puts "  filepath: #{filepath}"
                puts '  certs:'
                certs.each do |cert|
                  puts "    - path:    #{cert.path}"
                  puts "      expired: #{cert.cert.not_after}"
                  puts "      subject: #{cert.cert.subject}"
                  puts "      issuer:  #{cert.cert.issuer}"
                end
              end

              puts
              puts "Found #{exp_manifest_certs.length} certs close to expiry:"
              exp_manifest_certs.group_by(&:filepath).each do |filepath, certs|
                puts "  filepath: #{filepath}"
                puts '  certs:'
                certs.each do |cert|
                  expiry_days = ((cert.cert.not_after - Time.now) / 86_400).to_i
                  puts "    - path:       #{cert.path}:"
                  puts "      expires:    #{cert.cert.not_after}"
                  puts "      subject:    #{cert.cert.subject}"
                  puts "      issuer:     #{cert.cert.issuer}"
                  puts "      expires in: #{expiry_days} days"
                end
              end

              exit 1 unless expd_manifest_certs.empty?
              exit 1 unless exp_manifest_certs.empty?
              # rubocop:enable Layout/MultilineMethodCallIndentation
              # rubocop:enable Metrics/MethodLength
              # rubocop:enable Metrics/CyclomaticComplexity
              # rubocop:enable Metrics/AbcSize
