# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 1.8.0"

# We use bootstrap concourse SG and a subnet in default VPC in each region
AWS_ACCOUNT = ENV.fetch("AWS_ACCOUNT", "dev")
AWS_REGION = ENV.fetch("AWS_DEFAULT_REGION", "eu-west-1")
AWS_ACCOUNT_DATA = {
  "dev" => {
    "eu-west-1" => {
      subnet_id: "subnet-56a69a33",
      security_group: "sg-63323c05",
    },
    "eu-west-2" => {
      subnet_id: "subnet-d7949daf",
      security_group: "sg-d743f8bc",
    },
  },
  "ci" => {
    "eu-west-1" => {
      subnet_id: "subnet-0ebfab6b",
      security_group: "sg-0bcac46d",
    },
    "eu-west-2" => {
      subnet_id: "subnet-86def6cc",
      security_group: "sg-38de5753",
    },
  },
  "staging" => {
    "eu-west-1" => {
      subnet_id: "subnet-dd7776b8",
      security_group: "sg-a9cac4cf",
    },
    "eu-west-2" => {
      subnet_id: "subnet-a1d62bc8",
      security_group: "sg-57d25b3c",
    },
  },
  "prod" => {
    "eu-west-1" => {
      subnet_id: "subnet-a56297c1",
      security_group: "sg-10cbc576",
    },
    "eu-west-2" => {
      subnet_id: "subnet-fc44b995",
      security_group: "sg-2fd25b44",
    },
  },
}.freeze
AWS_ACCOUNT_VARIABLES = AWS_ACCOUNT_DATA.fetch(AWS_ACCOUNT).fetch(AWS_REGION)

# ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20180912
AWS_AMI = {
  "eu-west-1" => "ami-00035f41c82244dab",
  "eu-west-2" => "ami-0b0a60c0a2bd40612",
}.freeze

# rubocop:disable Metrics/BlockLength
Vagrant.configure(2) do |config|
  config.vm.box = ENV['VAGRANT_BOX_NAME'] || 'aws_vagrant_box'
  config.vm.allowed_synced_folder_types = :rsync

  Dir.glob("./post-deploy.d/*").sort.each do |post_deploy_file|
    config.vm.provision "shell" do |s|
      s.privileged = true
      s.env = ENV.select { |key|
        %w(
          AWS_ACCOUNT
          CONCOURSE_DATABASE_NAME
          CONCOURSE_URL
          CONCOURSE_WEB_PASSWORD
          CONCOURSE_WEB_USER
          BRANCH
          DEPLOY_ENV
          TARGET_CONCOURSE
          SYSTEM_DNS_ZONE_NAME
          BOSH_FQDN
          BOSH_FQDN_EXTERNAL
          BOSH_LOGIN_HOST
).include? key
      }
      s.name = post_deploy_file
      s.path = post_deploy_file
    end
  end

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.session_token = ENV['AWS_SESSION_TOKEN']
    aws.associate_public_ip = true
    aws.tags = { 'Name' => (ENV['DEPLOY_ENV'] || ENV['USER']) + " concourse" }
    aws.keypair_name = ENV['VAGRANT_SSH_KEY_NAME']

    aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 50 }]

    aws.ami = AWS_AMI.fetch(AWS_REGION)
    aws.region = AWS_REGION

    # Only HVM instances with ephemeral disks can be used
    aws.instance_type = 'm5.large'

    aws.subnet_id = AWS_ACCOUNT_VARIABLES.fetch(:subnet_id)
    aws.security_groups = [AWS_ACCOUNT_VARIABLES.fetch(:security_group)]

    # Add IAM role to allow access to necessary AWS APIs
    aws.iam_instance_profile_name = 'concourse-lite'

    # We will rely on vagrant generating a ssh key, but this must be the ubuntu user, as the vagrant user does not exist on the vm
    override.ssh.username = "ubuntu"
    override.ssh.private_key_path = ENV['VAGRANT_SSH_KEY']
  end
end
# rubocop:enable Metrics/BlockLength
